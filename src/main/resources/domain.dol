/*******************************************************************************
 * Copyright 2012-2013 Trento RISE
 * 
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 ******************************************************************************/
package eu.trentorise.smartcampus.domain.semantic;

import it.sayservice.platform.compiler.domain.model.annotations.Service;

DomainObject SemanticService {

    @Service(serviceId="eu.trentorise.smartcampus.services.semantic.SemanticService", methodName="CreateSCEntity", converter="eu.trentorise.smartcampus.domain.semantic.CreateSCEntityDataConverter")
    operation createSCEntity(type: String, name: String, description: String, tags: Tag[], relations: Long[]) returns Long;

    @Service(serviceId="eu.trentorise.smartcampus.services.semantic.SemanticService", methodName="CreateEntity", converter="eu.trentorise.smartcampus.domain.semantic.CreateEntityDataConverter")
    operation createEntity(actorId: Long, type: String, name: String, description: String, tags: Tag[], relations: Long[]) returns Long;

    @Service(serviceId="eu.trentorise.smartcampus.services.semantic.SemanticService", methodName="UpdateEntity", converter="eu.trentorise.smartcampus.domain.semantic.UpdateEntityDataConverter")
    operation updateEntity(id: Long, name: String, description: String, tags: Tag[], relations: Long[]) returns Boolean;

    @Service(serviceId="eu.trentorise.smartcampus.services.semantic.SemanticService", methodName="DeleteEntity", converter="eu.trentorise.smartcampus.domain.semantic.DeleteEntityDataConverter")
    operation deleteEntity(id: Long) returns Boolean;
}
